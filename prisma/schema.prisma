
generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://userdatabase_owner:UOdsD0H2wnIB@ep-curly-star-a5eu5l03.us-east-2.aws.neon.tech/userdatabase"
}



model User {
  id           Int       @id @default(autoincrement())
  name         String    @default("Unknown")
  email        String    @unique
  role         Userroles @default(User)
  password     String
  refreshToken String?
  subscription Json?
  favfoods     FavFood[]
}

model FavFood {
  id           Int       @id @default(autoincrement())
  type         String?
  userId       Int
  place        String?
  ffoodname    String?
  fplacename   String?
  ffoodtype    String?
  notified     String?   @default("not yet")
  user         User      @relation(fields: [userId], references: [id])
  favtype      Special[] @relation("favbytype")
  favfoodname  Special[] @relation("foodbyname")
  favplacename Special[] @relation("placebyname")
}

model Places {
  id             Int       @id @default(autoincrement())
  name           String    @unique
  location       String
  type           String
  imagepath      String
  specialsByName Special[] @relation("PlaceByName")
  specialsById   Special[] @relation("PlaceById")
}

model Special {
  id           Int        @id @default(autoincrement())
  name         String
  type         String
  poster       String     @default("beforetime")
  foodorgroc   FoodOrGroc
  imagepath    String
  from         String
  till         String
  before       Float
  after        Float
  placesId     Int
  PlaceName    String
  placeNa      Places     @relation("PlaceByName", fields: [PlaceName], references: [name])
  places       Places     @relation("PlaceById", fields: [placesId], references: [id])
  favtype      FavFood[]  @relation("favbytype")
  favfoodname  FavFood[]  @relation("foodbyname")
  favplacename FavFood[]  @relation("placebyname")
}

enum Userroles {
  User
  Owner
  Admin
}

enum FoodOrGroc {
  Food
  Groc
  Both
}
